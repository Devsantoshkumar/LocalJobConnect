Database name:
--------------
local_job_hire

table 1:
--------
users{
    users_id: int
    firstname: varchar(100)
    lastname: varchar(100)
    bio: varchar(500)
    email: varchar(100)
    email_varified: varchar(100)
    phone: varchar(14)
    password: varchar(250)
    image: varchar(200)
    cover: varchar(200)
    token: varchar(70)
    status: tinyInt-> default: 0
    date: datetime
    current_location: varchar(200)
    hiring_status: varchar(50)
    country_id: varchar(50)
    state_id: varchar(50)
    city_id: varchar(50)
    skills_id: varchar(50)                  // remove this column from the database
    educations_id: varchar(50)              // remove this column from the database
    rank: varchar(100)-> default(normal)
}


table 2:
--------
skills{
    skills_id: int primary_key auto_increament,
    skill_name: varchar(100),
    skill_description: varchar(150),
    skill_status: tinyInt default(1),
    user_id: int,
    date: datetime,
}

table 3:
--------
educations{
    educations_id: int primary_key auto_increament,
    education_name: varchar(100),
    education_description: varchar(150),
    skill_status: tinyInt default(1),
    user_id: int,
    date: datetime,
}

table 4:
--------
experiences{
    experiences_id: int primary_key auto_increament,
    experience_title: varchar(100),
    experience_description: varchar(150),
    experience_company: varchar(100),
    experience_start_date: varchar(50),
    experience_end_date: varchar(50),
    user_id: int,
    date: datetime,
}


table 5:
--------
protfolios{
    protfolios_id: int primary_key auto_increament,
    protfolio_image: varchar(100),
    protfolio_status: tinyInt default(1),
    user_id: int,
    date: datetime,
}






// search controller


<?php 

 
  class Search extends Controller{

    function index(){

        $errors = [];
        $notfound = "";
        $searches = "";
        $term = "";


        $packages = new Package();
        $category = new Category();
        $subcategory = new Subcategory();

        if(!empty($_GET['search_term'])){
           $term = $_GET['search_term'];
           if($searches = $packages->query("SELECT * FROM packages JOIN categorys ON packages.category_id = categorys.categorys_id WHERE (pack_location LIKE '%$term%' OR category LIKE '%$term%') AND pack_status = 1"))
           {
               $searches = $packages->query("SELECT * FROM packages JOIN categorys ON packages.category_id = categorys.categorys_id WHERE (pack_location LIKE '%$term%' OR category LIKE '%$term%') AND pack_status = 1");

           }else if($searches = $packages->query("SELECT * FROM packages WHERE pack_location LIKE '%$term%' AND pack_status = 1"))
           {
               $searches = $packages->query("SELECT * FROM packages WHERE pack_location LIKE '%$term%' AND pack_status = 1");

           }else if($searches = $packages->query("SELECT * FROM packages LEFT JOIN subcategorys ON packages.sub_category_id = subcategorys.subcategorys_id LEFT JOIN countrys ON subcategorys.countryId = countrys.countrys_id WHERE country_name LIKE '%$term%' AND pack_status = 1"))
           {
               $searches = $packages->query("SELECT * FROM packages LEFT JOIN subcategorys ON packages.sub_category_id = subcategorys.subcategorys_id LEFT JOIN countrys ON subcategorys.countryId = countrys.countrys_id WHERE country_name LIKE '%$term%' AND pack_status = 1");
               
           }else{
               $notfound = "Result not found";
           }
        }else{
              $notfound = "Result not found";
        }


        // auto load search option queries
        $pacData = $packages->query("SELECT * FROM packages JOIN categorys ON packages.category_id = categorys.categorys_id WHERE pack_status = 1");
        $subCat = $subcategory->query("SELECT * FROM subcategorys JOIN countrys ON subcategorys.countryId = countrys.countrys_id WHERE subcategory_status = 1");

        foreach($subCat as $csrow){
            $countArray[] = $csrow->country_name;
            $subCateArray[] = $csrow->sub_category;
        }

        foreach($pacData as $pdrow){
            $pacArray[] = $pdrow->pack_location;
            $catArray[] = $pdrow->category;
        }

        $finalArray = array_unique(array_merge($pacArray, $catArray, $countArray, $subCateArray));

        $this->view("search.page", ['errors'=>$errors, 'searchData'=>$searches, 'searchTerm'=>$term, 'notfound'=>$notfound, 'searchResults'=>$finalArray]);

  }

}

?>